name: Deploy to EC2

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      EC2_SERVER_1: ${{ secrets.EC2_SERVER_1 }}
      EC2_SERVER_2: ${{ secrets.EC2_SERVER_2 }}

    strategy:
      matrix:
        ec2_host: [ "EC2_SERVER_1", "EC2_SERVER_2" ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: ./gradlew clean bootJar

      - name: Add EC2 host to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p 30600 -H ${{ env[ matrix.ec2_host ] }} >> ~/.ssh/known_hosts

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Stop server
        run: |
          ssh -p 30600 ubuntu@${{ env[ matrix.ec2_host ] }} 'sudo systemctl stop quiz'

      - name: Copy Jar to EC2
        run: |
          scp -P 30600 build/libs/*.jar ubuntu@${{ env[ matrix.ec2_host ] }}:~/quiz

      - name: Start server
        run: |
          ssh -p 30600 ubuntu@${{ env[ matrix.ec2_host ] }} 'sudo systemctl start quiz'

          echo "Waiting for 20 seconds to allow the server to start..."
          sleep 20
          EOF

          echo "Waiting for new service to be available..."
          for i in {1..10}; do
            HEALTH_STATUS=$(curl -s http://localhost:30700/actuator/health | jq -r '.status')
            if [ "$HEALTH_STATUS" == "UP" ]; then
              echo "New service is running and healthy!"
              break
            fi
            sleep 3
          done
          EOF
